<?php
namespace Aura\Framework;
use Aura\Http\Response;
use Aura\Http\Headers;
use Aura\Http\Cookies;
use Aura\Web\ResponseTransfer;

/**
 * Test class for Responder.
 * Generated by PHPUnit on 2011-10-06 at 15:17:31.
 */
class ResponderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Responder
     */
    protected $responder;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->responder = new Responder(new Response(new Headers, new Cookies));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

    /**
     * @todo Implement testExec().
     */
    public function testExec()
    {
        $transfer = new ResponseTransfer;
        $transfer->setVersion('1.0');
        $transfer->setStatusCode('599');
        $transfer->setStatusText('Fake Status');
        $transfer->setHeader('foo-bar', 'baz');
        $transfer->setCookie('dib-zim', 'gir');
        $transfer->setContent('Body content');
        
        $response = $this->responder->exec($transfer);
        $this->assertType('Aura\Http\Response', $response);
        
        $this->assertEquals('1.0', $response->getVersion());
        
        $this->assertEquals('599', $response->getStatusCode());
        
        $this->assertEquals('Fake Status', $response->getStatusText());
        
        $this->assertSame('Body content', $response->getContent());
        
        $expect = array (
            'Foo-Bar' => array (
                0 => 'baz',
            ),
        );
        $actual = $response->headers->getAll();
        $this->assertSame($expect, $actual);
        
        $expect = array(
            'dib-zim' => array (
                'value' => 'gir',
                'expire' => 0,
                'path' => '',
                'domain' => '',
                'secure' => false,
                'httponly' => true,
            ),
        );
        $actual = $response->cookies->getAll();
        $this->assertSame($expect, $actual);
    }
}
