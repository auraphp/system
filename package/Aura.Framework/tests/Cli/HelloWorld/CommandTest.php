<?php
namespace Aura\Framework\Cli\HelloWorld;
use Aura\Cli\Getopt as Getopt;
use Aura\Cli\Stdio as Stdio;
use Aura\Cli\Vt100 as Vt100;
use Aura\Cli\Context as Context;
use Aura\Cli\OptionFactory as OptionFactory;
use Aura\Signal\Manager;
use Aura\Signal\HandlerFactory;
use Aura\Signal\ResultFactory;
use Aura\Signal\ResultCollection;
use Aura\Framework\System;

/**
 * Test class for Command.
 * Generated by PHPUnit on 2011-05-27 at 11:01:31.
 */
class CommandTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Command
     */
    protected $command;

    protected $stdio;
    
    protected $getopt;
    
    protected $system;
    
    protected $tmp_dir;
    
    protected $context;
    
    protected $signal;
    
    protected function newCommand($argv = array(), $system_dir = AURA_TEST_RUN_SYSTEM_DIR)
    {
        $_SERVER['argv'] = $argv;
        $this->context = new Context;
        
        $this->system = new System($system_dir);
        $this->tmp_dir =  $this->system->getTmpPath('test/Aura.Framework/cli/hello_world/Command');
        
        // use files because we can't use php://memory in proc_open() calls
        $this->outfile = tempnam($this->tmp_dir, '');
        $this->errfile = tempnam($this->tmp_dir, '');
        
        $stdin = fopen('php://stdin', 'r');
        $stdout = fopen($this->outfile, 'w+');
        $stderr = fopen($this->errfile, 'w+');
        $vt100 = new Vt100;
        
        $this->stdio = new Stdio($stdin, $stdout, $stderr, $vt100);
        
        $option_factory = new OptionFactory();
        $this->getopt = new Getopt($option_factory);
        
        $this->signal = new Manager(new HandlerFactory, new ResultFactory, new ResultCollection);
        
        $command = new Command(
            $this->context,
            $this->stdio,
            $this->getopt,
            $this->signal
        );
        
        return $command;
    }
    
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }
    
    /**
     * @todo Implement testAction().
     */
    public function test()
    {
        $command = $this->newCommand();
        $command->exec();
        
        // there should have been no errors
        $actual = file_get_contents($this->errfile);
        $this->assertSame('', $actual);
        
        // there should have been output
        $actual = file_get_contents($this->outfile);
        $this->assertSame('Hello World!' . PHP_EOL, $actual);
    }
}
